function [ deltan ] = calc4thf( radAngle, d, k, l, i, j )
%written by John G Lesicko
%calc4thf Calculate components f(i,j,k,l) for recreating original
%distribution from Kronecker Delta (identity), angle weighted
%   aa: 4th Order Tensor, calculated from dist
%   a: l2nd order tensor, calculated from aa
%   delta=i*j*k*l;
%   reverse (k,l),(i,j) accounts for Matlab's handling of higher order
%   tensors
% 
%             sum=0;
%             tot=0;
%             for x=1:180
%                 tot=trig(rads(x),i)*trig(rads(x),j)*trig(rads(x),k)*trig(rads(x),l)...
%                     - ((1.0/6.0)*(d(i,j)*trig(rads(x),k)*trig(rads(x),l) + ...
%                     d(i,k)*trig(rads(x),j)*trig(rads(x),l) + ...
%                     d(i,l)*trig(rads(x),j)*trig(rads(x),k) + ...
%                     d(j,k)*trig(rads(x),i)*trig(rads(x),l) + ...
%                     d(j,l)*trig(rads(x),i)*trig(rads(x),k) + ...
%                     d(k,l)*trig(rads(x),i)*trig(rads(x),j))) ...
%                     + ((1.0/24.0)*(d(i,j)*d(k,l) + ...
%                     d(i,k)*d(j,l) + ...
%                     d(i,l)*d(j,k)));               
%                 sum=sum+tot;
%                 
%             end
%             deltan=sum;


                deltan=trig(radAngle,i)*trig(radAngle,j)*trig(radAngle,k)*trig(radAngle,l)...
                    - ((1.0/6.0)*(d(i,j)*trig(radAngle,k)*trig(radAngle,l) + ...
                    d(i,k)*trig(radAngle,j)*trig(radAngle,l) + ...
                    d(i,l)*trig(radAngle,j)*trig(radAngle,k) + ...
                    d(j,k)*trig(radAngle,i)*trig(radAngle,l) + ...
                    d(j,l)*trig(radAngle,i)*trig(radAngle,k) + ...
                    d(k,l)*trig(radAngle,i)*trig(radAngle,j))) ...
                    + ((1.0/24.0)*(d(i,j)*d(k,l) + ...
                    d(i,k)*d(j,l) + ...
                    d(i,l)*d(j,k)));               


            
% deltan=aa(i,j,k,l)...
%     - ((1.0/6.0)*(d(i,j)*a(k,l) + ...
%     d(i,k)*a(j,l) + ...
%     d(i,l)*a(j,k) + ...
%     d(j,k)*a(i,l) + ...
%     d(j,l)*a(i,k) + ...
%     d(k,l)*a(i,j))) ...
%     + ((1.0/24.0)*(d(i,j)*d(k,l) + ...
%     d(i,k)*d(j,l) + ...
%     d(i,l)*d(j,k)));
%%

% n[\[Theta]][[i]]*n[\[Theta]][[j]]*n[\[Theta]][[k]]*
%    n[\[Theta]][[l]] - (1./6.)*(
%     \[Delta][[i, j]]*n[\[Theta]][[k]]*n[\[Theta]][[l]] +
%      \[Delta][[i, k]]*n[\[Theta]][[j]]*n[\[Theta]][[l]] +
%      \[Delta][[i, l]]*n[\[Theta]][[j]]*n[\[Theta]][[k]] +
%      \[Delta][[j, k]]*n[\[Theta]][[i]]*n[\[Theta]][[l]] +
%      \[Delta][[j, l]]*n[\[Theta]][[i]]*n[\[Theta]][[k]] +
%      \[Delta][[k, l]]*n[\[Theta]][[i]]*n[\[Theta]][[j]]) +
%   (1./24.)*(\[Delta][[i, j]]*\[Delta][[k, l]] + \[Delta][[i, 
%        k]]*\[Delta][[j, l]] + \[Delta][[i, l]]*\[Delta][[j, k]]);



end

